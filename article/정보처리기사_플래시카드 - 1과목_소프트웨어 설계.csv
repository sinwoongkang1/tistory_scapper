이전 단계로 돌아갈 수 없다는 전제하에 각 단계를 확실히 해듭짓고 그 결과를 철저하게 검토하여 승인 과정을 거친 후에 다음 단계를 진행하는 개발 방법론,폭포수 모형
보헴이 제시한 고전적 생명 주기 모형,폭포수 모형
가장 오래되고 폭넓게 사용된 전통적인 소프트웨어 생명 주기 모형,폭포수 모형
개발 과정에서 발생하는 요구사항을 반영하기 어려운 모형,폭포수 모형
사용자의 요구사항을 정확하기 파악하기 위해 실제 개발될 소프트웨어에 대한 시제품을 만들어 최종 결과물을 예측하는 모형,프로토타입 모형
시제품이 의뢰자가 개발자 모두에게 공통의 참조 모델이 된다,프로토타입 모형
"시스템의 일부 혹은 시스템 모형을 만드는 과정으로서 요구된 소프트웨어를 구현하는데, 이는 추후 구현 단계에서 사용될 골격 코드가 된다.",프로토타입 모형
"새로운 요구사항이 도출 될 때마다, 이를 반영한 프로토타입을 새롭게 만들면서 소프트웨어를 구현하는 방법이다",프로토타입 모형
단기간 제작 목적으로 인하여 비효율적인 언어나 알고리즘이 사용될 수 있다.,프로토타입 모형
"보헴이 제안한 것으로, 폭포수 모형과 프로토타입 모형의 장점에 위험분석 기능을 추가한 모형이다.",나선형 모형
나선을 따라 돌듯이 여러 번의 소프트웨어 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 것이다.,나선형 모형
계획수립 -> 위험분석 -> 개발 및 검증 -> 고객 평가 과정이 반복적으로 수행된다.,나선형 모형
핵심 기술에 문제가 있거나 사용자의 요구사항이 이해하기 어려운 경우에 접합한 모델이다.,나선형 모형
고객의 요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발과정을 진행하는 방식,에자일 모형
스크럼 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
칸반 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
XP 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
린 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
크리스탈 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
ASD 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
기능 중심 개발(FDD) 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
DSDM (Dinamic System Development Method) 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
DAD (Disciplined Agile Delivery) 기법은 어떠한 소프트웨어 개발 모형을 기반으로 하는가?,에자일 모형
애자일 원칙) 프로세스와 도구보다는 ___과 ______에 더 가치를 둔다,"개인, 상호작용"
애자일 원칙) 방대한 문서보다는 _____에 더 가치를 둔다 ,실행되는 SW
애자일 원칙) 계약 협상보다는 _____ 에 더 가치를 둔다,고객과 협업
애자일 원칙)계획을 따르기 보다는 ________것에 더 가치를 둔다 ,변화에 반응
수시로 발생하는 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법.,eXtrem Programming (XP)
"짧고 반복적인 개발주기, 단순한 설계, 고객의 적극적인 참여를 통해 소프트웨어를 빠르게 개발하는 것을 목표로 한다",eXtrem Programming (XP)
자동화된 테스팅 도구를 사용하여 테스트를 지속적으로 수행한다 ,eXtrem Programming (XP)
"xP 의 핵심 가치) _____ 단순성, 용기, 존중, 피드백",의사소통
"xP 의 핵심 가치) 의사소통, _____, 용기, 존중, 피드백",단순성
"xP 의 핵심 가치)  의사소통 ,단순성, _____, 존중, 피드백 ",용기
"xP 의 핵심 가치) 의사소통, 단순성, 용기, ______, 피드백",존중
"xP 의 핵심 가치) 의사소통, 단순성, 용기, 존중, _____",피드백
xp 의 주요 실천 방법 : 다른사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성하는 방법,짝 프로그래밍
xP의 주요 실천 방법 : 개발 코드에 대한 권한과 책임을 공동으로 소유함,공동 코드 소유
xP의 주요 실천 방법 : 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합됨,계속적인 통합
"xP의 주요 실천 방법 : 프로그램 기능의 변경 없이, 단순화, 유연성 강화등을 통해 시스템의 내부 구졸르 재구성함",리팩토링
"자료 흐름도 (DFD) 에서 ""자료의 흐름(Data Flow)"" 표기 형태는 ?",화살표
"자료 흐름도 (DFD) 에서 ""프로세스(Process)"" 표기 형태는 ?",원
"자료 흐름도 (DFD) 에서 ""단말(Terminator)"" 표기 형태는 ?",사각형
"자료 흐름도 (DFD) 에서 ""자료 저장소(Data store)"" 표기 형태는 ?",직선(평행선)
"자료 사전의 표기 기호중  "" = "" 의 의미는 ?",자료의 정의 : ~로 구성되어 있다
"자료 사전의 표기 기호중  "" + "" 의 의미는 ?",자료의 연결 : 그리고(and)
"자료 사전의 표기 기호중  "" (   ) "" 의 의미는 ?",자료의 생략
"자료 사전의 표기 기호중  "" [ | ] "" 의 의미는 ?",자료의 선택 or
"자료 사전의 표기 기호중  "" {  } "" 의 의미는 ?",자료의 반복
"자료 사전의 표기 기호중  "" * * "" 의 의미는 ?",자료의 설명 : 주석
"시스템의 분석 및 설계나 문서화할 때 사용되는 기법으로, 시스템 실행 과정인 입력,처리,출력의 기능을 나타낸다. 하향식 소프트웨어 개발을 위한 문서화 도구이다",HIPO
"시스템 분석, 설계, 구현 등 시스템 개발 과정에서 개발자와 고객 또는 개발자 상호간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어",UML
"UML 사물의 종류) _________, 행동 사물, 그룹 사물, 주해 사물",구조 사물
"UML 사물의 종류) 구조 사물, ________, 그룹 사물, 주해 사물",행동 사물
"UML 사물의 종류) 구조 사물, 행동 사물, ________, 주해 사물",그룹 사물
"UML 사물의 종류) 구조 사물, 행동 사물, 그룹 사물, _________",주해 사물
"구조적 (정적) 다이어그램의 종류 ) _______________, 객체 다이어그램, 컴포넌트 다이어그램, 배치 다이어그램, 복합체 구조 다이어그램, 패키지 다이어그램",클래스 다이어그램
"구조적 (정적) 다이어그램의 종류 ) 클래스 다이어그램, _______________, 컴포넌트 다이어그램, 배치 다이어그램, 복합체 구조 다이어그램, 패키지 다이어그램",객체 다이어그램
"구조적 (정적) 다이어그램의 종류 ) 클래스 다이어그램, 객체 다이어그램, _______________, 배치 다이어그램, 복합체 구조 다이어그램, 패키지 다이어그램",컴포넌트 다이어그램
"구조적 (정적) 다이어그램의 종류 ) 클래스 다이어그램, 객체 다이어그램, 컴포넌트 다이어그램, _______________, 복합체 구조 다이어그램, 패키지 다이어그램",배치 다이어그램
"구조적 (정적) 다이어그램의 종류 ) 클래스 다이어그램, 객체 다이어그램, 컴포넌트 다이어그램, 배치 다이어그램, _______________, 패키지 다이어그램",복합체 구조 다이어그램
"구조적 (정적) 다이어그램의 종류 ) 클래스 다이어그램, 객체 다이어그램, 컴포넌트 다이어그램, 배치 다이어그램, 복합체 구조 다이어그램, _______________",패키지 다이어그램
"행위(동적) 다이어그램의 종류 ) _______________, 순차 다이어그램, 커뮤니케이션 다이어그램, 상태 다이어그램, 활동 다이어그램, 상호작용 개요 다이어그램, 타이밍 다이어그램",유스케이스 다이어그램
"행위(동적) 다이어그램의 종류 ) 유스케이스 다이어그램, _______________ 커뮤니케이션 다이어그램, 상태 다이어그램, 활동 다이어그램, 상호작용 개요 다이어그램, 타이밍 다이어그램",순차 다이어그램
"행위(동적) 다이어그램의 종류 ) 유스케이스 다이어그램, 순차 다이어그램, _______________, 상태 다이어그램, 활동 다이어그램, 상호작용 개요 다이어그램, 타이밍 다이어그램",커뮤니케이션 다이어그램
"행위(동적) 다이어그램의 종류 ) 유스케이스 다이어그램, 순차 다이어그램, 커뮤니케이션 다이어그램, _______________, 활동 다이어그램, 상호작용 개요 다이어그램, 타이밍 다이어그램",상태 다이어그램
"행위(동적) 다이어그램의 종류 ) 유스케이스 다이어그램, 순차 다이어그램, 커뮤니케이션 다이어그램, 상태 다이어그램, _______________, 상호작용 개요 다이어그램, 타이밍 다이어그램",활동 다이어그램
"행위(동적) 다이어그램의 종류 ) 유스케이스 다이어그램, 순차 다이어그램, 커뮤니케이션 다이어그램, 상태 다이어그램, 활동 다이어그램,_______________, 타이밍 다이어그램",상호작용 개요 다이어그램
"행위(동적) 다이어그램의 종류 ) 유스케이스 다이어그램, 순차 다이어그램, 커뮤니케이션 다이어그램, 상태 다이어그램, 활동 다이어그램, 상호작용 개요 다이어그램, _______________",타이밍 다이어그램
하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호작용에 따라 상태가 어떻게 변화하는지 표현한 다이어그램은?,상태 다이어그램
상태 다이어그램은 객체들 사이에서 발생하는 _______에 의한 객체들의 상태변화를 그림으로 표현한다,이벤트
UML 에서 표현하는 기본 기능 외에 추가적인 기능을 표현하기 위해 사용하는 것,스테레오 타입
스테레오 타입 객체를 표현할 때 사용하는 기호는?,<<>>
럼바우의 객체지향 분석 절차는?,객체 - 동적 - 기능
유스케이스 다이어그램의 구성요소 중) 시스템 내부에서 수행되는 기능들을 외부 시스템과 구분하기 위해 시스템 내부의 유스케이스들을 사각형으로 묶어 시스템의 범위를 표현한 것,시스템 / 시스템 범위
유스케이스 다이어그램의 구성요소 중) 시스템과 상호작용을 하는 모든 외부요소로 사람이나 외부 시스템을 의미하는 것은,액터
유스케이스 다이어그램의 구성요소 중) 사용자가 보는 관점에서 시스템이 액터에게 재공하는 서비스 또는 그 기능을 표현한 것,유스케이스
"시스템이나 객체들이 메세지를 주고 받으며 시간의 흐름에 따라 상호작용하는 과정을 액터, 객체, 메시지 등의 요소를 사용하여 그림으로 표현한 것은?",순차다이어그램
순차 다이어그램은 시스템이나 객체들의 상호작용 과정에서 주고받는 ______를 표현한다,메시지
순차 다이어그램에서 수직 방향은 _______을 나타낸다,시간의 흐름
"순차 다이어그램의 구성요소) _____, 객체, 생명선, 실행 상자, 메시지, 회귀 메시지, 제어 블록",액터
"순차 다이어그램의 구성요소) 액터, ______, 생명선, 실행 상자, 메시지, 회귀 메시지, 제어 블록",객체
"순차 다이어그램의 구성요소) 액터, 객체, ______, 실행 상자, 메시지, 회귀 메시지, 제어 블록",생명선
"순차 다이어그램의 구성요소) 액터, 객체, 생명선, ______, 메시지, 회귀 메시지, 제어 블록",실행 상자
"순차 다이어그램의 구성요소) 액터, 객체, 생명선, 실행 상자, ______, 회귀 메시지, 제어 블록",메시지
"순차 다이어그램의 구성요소) 액터, 객체, 생명선, 실행 상자, 메시지, ______, 제어 블록",회쉬 메시지
"순차 다이어그램의 구성요소) 액터, 객체, 생명선, 실행 상자, 메시지, 회귀 메시지, ______",제어블록
서로 다른 두 시스템이나 소프트웨어 등을 서로 이어주는 부분 또는 접속장치를 의미하는 것,인터페이스
사용자 인터페이스 중 명령과 출력이 텍스트 형태로 이뤄지는 인터페이스,CLI
사용자 인터페이스 중 아이콘이나 메뉴를 마우스로 선택하여 작업을 수행하는 그래픽 환경의 인터페이스,GUI
사용자 인터페이스 중 사용자의 말이나 행동으로 기기를 조작하는 인터페이스,NUI
주요 모바일 제스쳐 ) 화면을 가볍게 한 번 터치하는 동작 ( 누르기 ),Tap
주요 모바일 제스쳐 ) 화면을 빠르게 두 번 터치하는 동작 ( 두 번 누르기),Double Tap
주요 모바일 제스쳐 ) 화면을 특정 위치를 손가락으로 꾹 누르는 동작 ( 오래 누르기 ),Press
주요 모바일 제스쳐 ) 화면에 손가락을 터치하면서 수평 또는 수직으로 빠르게 드래그 하는 동작 ( 빠르게 스크롤 ),Flick
주요 모바일 제스쳐 ) 두 손가락으로 화면을 터치한 후 두 손가락을 서로 다른 방향으로 움직이는 동작 ( 두 손가락으로 넓히기 / 좁히기 ),Pinch
사용자 인터페이스 원칙 ) 누구나 쉽게 이해할 수 있어야 함,직관성
사용자 인터페이스 원칙 ) 사용자의 목적을 정확하고 완벽하게 달성해야 함 ,유효성
사용자 인터페이스 원칙 ) 누구나 쉽게 배우고 익힐 수 있어야 함,학습성
사용자 인터페이스 원칙 ) 사용자의 요구사항을 최대한 수용하고 실수를 최소화 해야 함,유연성
"사용자 인터페이스의 설계 지침) 사용자가 쉽게 이해하고 편리하게 사용할 수 있는 환경을 제공하며, 실사용자에 대한 이해가 바탕이 되어야 함",사용자 중심
"사용자 인터페이스의 설계 지침 사용자가 얼마나 소프트웨어을 빠르고 쉽게 이해할 수 있는지, 얼마나 편라하고 효율적으로 사용할 수 있는지를 말하는 것",사용성
사용자 인터페이스의 설계 지침) 디자인적으로 완성도 높게 글꼴이나 색상을 적용하고 그래픽 요소를 배치하여 가독성을 높일 수 있도록 설계해야 함,심미성
사용자 인터페이스의 설계 지침) 오류가 발생하면 사용자가 쉽게 인지할 수 있도록 설계해야 함,오류 발생 해결
"UI 설계도구 중 기획단계 초기에 제작하는 것으로, 페이지에 대한 개략적인 레이아웃이나 UI 요소등에 대한 뼈대를 설계하는 것",와이어프레임
"디자인, 사용 방법 설명, 평가 등을 위해 와이어프레임보다 좀 더 실제화면과 유사하게 만든 정적 형태의 모형. 시각적으로만 구성 요소를 배치하는 것으로 실제로 구현되지는 않는다",목업
"자연어로 작성된 사용자의 요구사항을 구조적으로 표현한 것으로, 일반적으로 다이어그램 형식으로 묘사되는 UI 설계도구는?",유스케이스
품질 요구사항 중 소프트웨어가 사용자의 요구사항을 정확하게 만족하는 기능을 제공하는지 여부를 나타내는 것,기능성
품질 요구사항 중 소프트웨어가 요구된 기능을 정확하고 일관되게 오류없이 수행할 수 있는 정도를 나타내는 것,신뢰성
"품질 요구사항 중 사용자가 쉽게 배우고 사용할 수 있으며, 향후 다시 사용하고 싶은 정도를 나타내는 것",사용성
품질 요구사항 중 소프트웨어가 다른 환경에도 얼마나 쉽게 적용할 수 있는지 정도를 나타내는 것,이식성
"소프트웨어의 성능을 향상시키거나, 시스템의 수정 및 재사용, 유지 관리등이 용이하도록 시스템의 기능들을 모듈 단위로 나누는 것은?",모듈화
소프트웨어 아키텍쳐의 설계 과정 ) ______________ -> 시스템 타입 결정 -> 아키텍쳐 패턴 적용 -> 서브시스템 구체화 -> 검토,설계 목표 설정
소프트웨어 아키텍쳐의 설계 과정 ) 설계 목표 설정 -> ______________-> 아키텍쳐 패턴 적용 -> 서브시스템 구체화 -> 검토,시스템 타입 결정
소프트웨어 아키텍쳐의 설계 과정 ) 설계 목표 설정 -> 시스템 타입 결정 -> ______________ -> 서브시스템 구체화 -> 검토,아키텍쳐 패턴 적용
소프트웨어 아키텍쳐의 설계 과정 ) 설계 목표 설정 -> 시스템 타입 결정 -> 아키텍쳐 패턴 적용 -> ______________-> 검토,서브시스템 구체화
소프트웨어 아키텍쳐의 설계 과정 ) 설계 목표 설정 -> 시스템 타입 결정 -> 아키텍쳐 패턴 적용 -> 서브시스템 구체화 -> _______,검토
데이터 스트림 절차의 각 단계를 필터 컴포넌트로 캡슐화 하여 파이프를 통해 데이터를 전송하는 패턴,파이프-필터 패턴
"서브 시스템의 핵심 기능과 데이터를 보관하는 모델, 사용자에게 정보를 표시하는 뷰, 사용자로부터 입력된 변경 요청을 처리하기위해 모델에 명령을 보내는 컨트롤러로 구성된 패턴",MVC 패턴
"동일한 구조의 슬레이브 컴포넌트로 작업을 분할한 후, 슬레이브 컴포넌트에서 처리된 결과물을 다시 돌려받는 방식으로 작업을 수행하는 패턴",마스터-슬레이브 패턴
데이터와 데이터를 처리하는 함수를 묶어놓은 하나의 서포트웨어 모듈,객체
"객체들 간에 상호작용을 하는 데 사용되는 수단으로, 객체에게 어떤 행위를 하도록 지시하는 명령 또는 요구사항",메세지
"공통된 속성과 연산(행위)을 갖는 객체의 집합으로, 객체의 일반적인 타입을 의미. _____에 속한 각각의 객체를 ______ 라고 한다.","클래스, 인스턴스"
데이터(속성)와 데이터를 처리하는 함수를 하나로 묶는 것. ______된 객체는 외부 모듈의 변경으로 인한 파급 효과가 적다. _____화 한 객체들은 재사용이 용이하다.,캡슐화(Encapsulation)
이미 정의된 상의 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것.,상속(Inheritance)
"메시지에 의해 객체가 연산을 수행하게 될 때, 하나의 메시지에 대해 각각의 클래스가 가지고 있는 고유한 방법으로 응답할 수 있는 능력을 의미",다형성(Polymorphism)
메소드의 이름은 같지만 인수를 받는 자료형과 개수를 달리하여 여러 기능을 정의하는 것,오버로딩
상위 클래스에서 정의한 메소드의 이름은 같지만 메소드 안의 실행코드를 달리하여 자식 클래스에서 재 정의 하여 사용하는 것.,오버라이딩
객체는 단 하나의 책임만 가져야 한다는 원칙. 응집도는 높고 결합도는 낮게 설계해야 한다는 것을 의미하는 것은,단일 책임 원칙
"기존의 코드를 변경하지 않고 기능을 추가할 수 있도록 실계해야 한다는 원칙으로, 공통된 인터페이스를 하나의 인터페이스로 묶어 캡슐화 하는 것은",개방 폐쇄 원칙
자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다는 설계 원칙. 자식 클래스는 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 해야 한다는 원칙,리스코프 치환 원칙
자신이 사용하지 않는 인터페이스와 의존관계를 맺거나 영향을 받지 않아야 한다는 원칙.,인터페이스 분리 원칙
"각 객체들 간의 의존관계가 성립할 때, 추상성이 낮은 클래스보다 추상성이 높은 클래스와 의존관계를 맺어야 한다는 원칙",의존 역전 원칙
모듈 간의 인터페이스가 자료 요소로만 구성될 때의 결합도,자료 결합도
모듈 간의 인터페이스가 배열이나 레코드 등의 자료구조가 전달될 때의 결합도,스탬프 결합도
어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호를 이용하여 통신하거나 제어 요소를 전달하는 결합도,제어 결합도
어떤 모듈에서 선언한 데이터를 외부의 다른 모듈에서도 참조할 때의 결합도,외부 결합도
공유되는 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도,공통 결합도
한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때의 결합도,내용 결합도
결합도의 정도 ( 약함 - 강함 ) ________ - 스탬프 결합도 - 제어 결합도 - 외부 결합도 - 공통 결합도 - 내용 결합도,자료 결합도
결합도의 정도 ( 약함 - 강함 ) 자료 결합도- _________ - 제어 결합도 - 외부 결합도 - 공통 결합도 - 내용 결합도,스탬프 결합도
결합도의 정도 ( 약함 - 강함 ) 자료 결합도- 스탬프 결합도 - __________ - 외부 결합도 - 공통 결합도 - 내용 결합도,제어 결합도
결합도의 정도 ( 약함 - 강함 ) 자료 결합도- 스탬프 결합도 - 제어 결합도 - __________- 공통 결합도 - 내용 결합도,외부 결합도
결합도의 정도 ( 약함 - 강함 ) 자료 결합도- 스탬프 결합도 - 제어 결합도 - 외부 결합도 - __________ - 내용 결합도,공통 결합도
결합도의 정도 ( 약함 - 강함 ) 자료 결합도- 스탬프 결합도 - 제어 결합도 - 외부 결합도 - 공통 결합도 - __________,내용 결합도
명령이나 호출문 등 모듈의 내부 요소들의 서로 관련되어 있는 정도. 모듈이 독립적인 기능으로 정의되어 있는 정도를 의미하는 것,응집도
모듈 내부의 각 구성요소들이 서로 관련 없는 요소로만 구성된 경우의 응집도,우연적 응집도
유사한 성격을 갖거나 특정 형태로 분류되는 처리요소들로 하나의 모듈이 형성되는 경우의 응집도,논리적 응집도
특정 시간에 처리되는 몇 개의 기능들을 모아 하나의 모듈로 작성할 경우의 응집도,시간적 응집도
모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행할 경우의 응집도,절차적 응집도
동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 구성요소들이 모여있을 경우의 응집도,교환적 응집도
모듈 내 하나의 활동으로부터 나온 출력 데이터를 그 다음 활동의 입력 데이터로 사용할 경우의 응집도,순차적 응집도
모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우의 응집도,기능적 응집도
응집도의 정도 (약함 - 강함) _____________ - 논리적 응집도 - 시간적 응집도 - 절차적 응집도 - 교환적 응집도 - 순차적 응집도 - 기능적 응집도,우연적 응집도
응집도의 정도 (약함 - 강함) 우연적 응집도 - _____________- 시간적 응집도 - 절차적 응집도 - 교환적 응집도 - 순차적 응집도 - 기능적 응집도,논리적 응집도
응집도의 정도 (약함 - 강함) 우연적 응집도 - 논리적 응집도 - _____________ - 절차적 응집도 - 교환적 응집도 - 순차적 응집도 - 기능적 응집도,시간적 응집도
응집도의 정도 (약함 - 강함) 우연적 응집도 - 논리적 응집도 - 시간적 응집도 -_____________ - 교환적 응집도 - 순차적 응집도 - 기능적 응집도,절차적 응집도
응집도의 정도 (약함 - 강함) 우연적 응집도 - 논리적 응집도 - 시간적 응집도 - 절차적 응집도 - _____________ - 순차적 응집도 - 기능적 응집도,교환적 응집도
응집도의 정도 (약함 - 강함) 우연적 응집도 - 논리적 응집도 - 시간적 응집도 - 절차적 응집도 - 교환적 응집도 - _____________ - 기능적 응집도,순차적 응집도
응집도의 정도 (약함 - 강함) 우연적 응집도 - 논리적 응집도 - 시간적 응집도 - 절차적 응집도 - 교환적 응집도 - 순차적 응집도 - _____________,기능적 응집도
각 모듈의 세분화된 역할이나 모듈간의 인터페이스와 같은 코드를 작성하는 수준의 세부적인 구현 방안을 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제를 의미하는 것,디자인 패턴
"디자인 패턴의 유형 ) ________, 구조패턴, 행위패턴",생성패턴
"디자인 패턴의 유형 ) 생성패턴, ________, 행위패턴",행위패턴
"디자인 패턴의 유형 ) 생성패턴, 구조패턴, ________",구조패턴
"구체적인 클래스에 의존하지 않고, 인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현하는 생성 패턴의 종류는?",추상 팩토리
작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성하는 생성 패턴의 종류는?,빌더 패턴
"객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴. 상위 클래스에서 인터페이스만 정의하고, 실제 생성은 서브 클래스가 담당하는 생성패턴의 종류는?",팩토리 메소드 패턴
원본 객체를 복제하는 방법으로 객체를 생성하는 패턴은?,프로토타입 패턴
"하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조할 수 없는 패턴은?",싱글톤 패턴
호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 구조 패턴은?,어댑터 패턴
"구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 구조 패턴은?",브리지 패턴
여러 객채를 가진 복합 객체와 단일 객채를 구분 없이 다루고자 할 때 사용하는 구조 패턴은?,컴포지트 패턴
"객체 간의 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴으로, 임의의 객체에 부가적인 기능을 추가하기 위해 다른 객체들을 덧붙이는 방식으로 구현하는 구조 패턴은?",데코레이터 패턴
복잡한 서브 클래새들을 피해 더 상위에 인터페이스를 구성함으로써 서브 클래스들의 기능을 간편하게 사용할 수 있도록 하는 구조 패턴은?,퍼싸드 패턴
"인스턴스가 필요할 때 마다 매번 생성하는 것이 아니고, 가능한 한 공유해서 사용함으로써 메모리를 절약하는 구조패턴 은?",플라이웨이트 패턴
접근이 어려운 객체와 여기에 연결하려는 객체 사이에서 인터페이스 역할을 수행하는 구조패턴은?,프록시 패턴
행위 패턴의 하나로 요청을 처리할 수 있는 객체가 둘 이상 존재하여 한 객체가 처리하지 못하면 다음 객체로 넘어가는 패턴은?,책임 연쇄 패턴
행위 패턴의 하나로 요청을 객체의 형태로 캡슐화 하여 재이용하거나 취소할 수 있도록 요청에 필요한 정보를 저장하거나 로그에 남기는 패턴은?,커맨드 패턴
"언어에 문법을 정의하는 패턴으로, SQL 이나 통신 프로토콜과 같은 것을 개발할 때 사용하는 행위 패턴은?",인터프리터 패턴
자료구조와 같이 접근이 잦은 객체에 대해 동일한 인터페이스를 적용하도록 하는 행위 패턴은?,반복자 패턴
수많은 객체들 간의 복잡한 상호작용을 캡슐화 하여 객체로 정의하는 행위 패턴은?,중재자 패턴
"특점 시점에서의 객체 내부 상태를 객체화 함으로써, 이후 요청에 따라 객체의 해당 시점의 상태로 돌릴 수 있는 기능을 제공하는 행위 패턴은?",메멘토 패턴
한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 저날하는 행위 패턴은?,옵저버 패턴
객체의 상태에 따라 동일한 동작을 다르게 처리해야 할 때 사용하는 행위 패턴은?,상태 패턴
동일한 계열의 알고리즘들을 개별적으로 캡슐화하여 상호 교환할 수 있게 정의하는 행위 패턴은?,전략 패턴
"상위 클래스에서 골격을 정의하고, 하위 클래스에서 세부 처리를 구체화 하는 행위패턴은?",템플릿 메소드 패턴
각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성하는 행위패턴은?,방문자 패턴
"분산 컴퓨터 환경에서 서로 다른 기종 간의 하드웨어나 프로토콜, 통신환경 등을 연결하여 운영체제와 운영프로그램, 또는 서버와 클라이언트 사이에서 원활한 통신이 이루어지도록 서비스 하는 것은?",미들 웨어
데이터베이스 밴더에서 제공하는 클라이언트에서 원격의 데이터베이스와 연결하기 위한 미들웨어는?,DB
응용 프로그램의 프로시저를 사용하여 원격 프로시저를 마치 로컬 프로시저처럼 호출하는 방식의 미들웨어는?,RPC
메시지 기반의 비동기형 메시지를 전달하는 방식의 미들웨어는?,MOM
항공기나 철도 예약 업무등과 같은 온라인 트랜잭션 업무에서 트랜잭션을 처리 및 감시하는 미들웨어는?,TP-Monitor (트랜잭젼 처리 모니터)
객체 지향 미들웨어로 코바 표준 스펙을 구현한 미들웨어는?,ORB(객체 요청 브로커)
정적인 콘텐츠를 처리하는 웹 서버와 달리 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어는?,WAS(웹 어플리케이션 서버)